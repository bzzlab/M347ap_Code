# Aufgabe 1: Blog-Seite mit Wordpress und MySQL erstellen
#1. Studieren Sie die Demonstration aus dem heutigen Input
#2. Erstellen Sie eine Multi-Container-Anwendung mit Wordpress und MySQL
#3. Versuchen Sie eigenen Blog-Eintrag mit einer Seite und einem fiktiven Kommentar zu erstellen.
#4. Als Login verwenden Sie <IhrKürzel>
#5. Auf der Blogseite verwenden Sie <IhrKürzel>
#6. Überprüfen Sie die letzten 15 Log-Einträge der Container.
#7. Stoppen Sie den Container und geben Sie den Inhalt einer Log-Datei aus
#8. Löschen Sie alle erzeugten Ressourcen, um Seiteneffekte für neue Übungen zu vermeiden
#9. Run docker compose as follows: docker-compose -f a01.yaml up -d
#
### Siehe auch https://youtu.be/7lLdDUwICdY #??
#
# Services
services:
  # Service database
  db:
    # set mysql as image
    image: mysql:latest #??
    # set container name
    container_name: mysql_database #??
    # set volumes for db_data
    volumes:
      - db_data:/var/lib/mysql #??
    # restart always
    restart: always #??
    # set mysql root and standard password,
    # database and user as environment
    environment:
      MYSQL_ROOT_PASSWORD: word@press #??
      MYSQL_DATABASE: wordpress #??
      MYSQL_USER: wordpress #??
      MYSQL_PASSWORD: abc@123 #??

  # Service word press
  wordpress:
    # depends on database service
    depends_on:
      - db #??
    # set word press as image
    image: wordpress:latest  #??
    # set container name
    container_name: wd_frontend  #??
    # set volumes for wordpress_files
    volumes:
      - wordpress_files:/var/www/html  #??
    # set port inbound to 80, outbound to 8000
    ports:
      - "8000:80" #??
    # restart always
    restart: always #??
    # set word press database-host, -user and -password
    # database and user as environment
    environment:
      WORDPRESS_DB_HOST: db:3306 #??
      WORDPRESS_DB_USER: wordpress #??
      WORDPRESS_DB_PASSWORD: abc@123 #??

# used volumes are
#  wordpress_files and
#  db_data
volumes:
    wordpress_files: #??
    db_data: #??



